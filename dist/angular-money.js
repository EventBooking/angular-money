Angular.module("ngMoney", []);
var MoneyModule;
(function (MoneyModule) {
    var MoneyInputController = (function () {
        function MoneyInputController() {
        }
        MoneyInputController.prototype.onInit = function (view) {
            this.view = view;
            this.setView(this.value);
        };
        Object.defineProperty(MoneyInputController.prototype, "currency", {
            get: function () {
                return this._currency;
            },
            set: function (value) {
                this._currency = value;
                this.symbol = null;
                if (value != null)
                    this.symbol = currency.symbolize(this.currency);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MoneyInputController.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = accounting.unformat(value);
                this.setView(this._value);
            },
            enumerable: true,
            configurable: true
        });
        MoneyInputController.prototype.setView = function (value) {
            this.money = null;
            if (value == null)
                return;
            this.money = accounting.formatMoney(value, {
                symbol: this.symbol
            });
            if (this.view != null)
                this.view.setViewValue(this.money);
        };
        return MoneyInputController;
    }());
    Angular.module("ngMoney").controller("moneyInput", MoneyInputController);
    var MoneyInputDirective = (function () {
        function MoneyInputDirective() {
            var _this = this;
            this.restrict = 'A';
            this.require = 'ngModel';
            this.controller = MoneyInputController;
            this.controllerAs = 'moneyInput';
            this.bindToController = true;
            this.scope = {
                value: '=moneyInput',
                currency: '@'
            };
            this.link = function ($scope, $element, $attrs, ngModelCtrl) {
                var $ctrl = $scope[_this.controllerAs];
                $element.on("blur." + $scope.$id, function () {
                    $ctrl.value = ngModelCtrl.$modelValue;
                });
                $scope.$on('$destroy', function () {
                    $element.off("blur." + $scope.$id);
                });
                var view = {
                    setViewValue: function (value) {
                        ngModelCtrl.$setViewValue(value);
                        ngModelCtrl.$render();
                    }
                };
                $ctrl.onInit(view);
            };
        }
        MoneyInputDirective.$inject = [];
        return MoneyInputDirective;
    }());
    Angular.module("ngMoney").directive("moneyInput", MoneyInputDirective);
})(MoneyModule || (MoneyModule = {}));
var MoneyModule;
(function (MoneyModule) {
    var MoneyFiltersModule;
    (function (MoneyFiltersModule) {
        var MoneyFilter = (function () {
            function MoneyFilter() {
            }
            MoneyFilter.prototype.filter = function (value, code, options) {
                if (value == null || angular.isString(value) && value.trim().length === 0)
                    return "";
                var _options = {
                    precision: accounting.settings.currency.precision
                };
                if (angular.isObject(code)) {
                    _options = code;
                    code = null;
                }
                if (value.amount) {
                    code = value.currency || code;
                    value = value.amount;
                }
                if (!options)
                    options = {};
                for (var x in options)
                    _options[x] = options[x];
                var v = accounting.unformat(value);
                if (options.abbrev) {
                    if (v >= 1000000) {
                        value = v / 1000000;
                        _options.precision = value.toString().indexOf('.') > 0 ? 1 : 0;
                        _options.format = "%s%vM";
                    }
                    else if (v >= 1000) {
                        value = v / 1000;
                        _options.precision = value.toString().indexOf('.') > 0 ? 1 : 0;
                        _options.format = "%s%vK";
                    }
                    else if (v >= 100) {
                        value = v;
                        _options.precision = value.toString().indexOf('.') > 0 ? _options.precision : 0;
                        _options.format = "%s%v";
                    }
                    else if (v >= 10) {
                        value = v;
                        _options.precision = value.toString().indexOf('.') > 0 ? _options.precision : 0;
                        _options.format = "%s%v";
                    }
                }
                _options.symbol = currency.symbolize(code);
                var result = accounting.formatMoney(value, _options);
                return result;
            };
            return MoneyFilter;
        }());
        Angular.module("ngMoney").filter("money", MoneyFilter);
    })(MoneyFiltersModule || (MoneyFiltersModule = {}));
})(MoneyModule || (MoneyModule = {}));
//# sourceMappingURL=data:application/json;base64,